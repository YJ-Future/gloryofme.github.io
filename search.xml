<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[学习线路计划]]></title>
    <url>%2F2018%2F02%2F19%2F%E5%AD%A6%E4%B9%A0%E7%BA%BF%E8%B7%AF%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[想学的东西有很多，越来觉得底层基础知识和数据结构算法决定了自己的上限。底层基础： 计算机组成原理 操作系统 计算机网络 编译原理 语言&amp;框架： jvm tomcat spring spring-boot bubbo kafka sharing-sphere redis netty disruptor https://github.com/LMAX-Exchange/disruptor/wiki 算法数据结构]]></content>
      <tags>
        <tag>规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo 常用命令]]></title>
    <url>%2F2018%2F01%2F01%2F2018-01-01-hexo-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[经常使用的hexo 命令 新建文章命令： hexo new &quot;title name&quot;示例： hexo new &quot;hexo 常用命令&quot; 生成静态文件命令： hexo generate 或者 hexo g 部署命令： hexo deploy 或者 hexo d实例： 部署之前预生成静态文件 hexo d -g 启动服务器命令： hexo server 或者 hexo s]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git全局和局部用户信息配置]]></title>
    <url>%2F2017%2F12%2F11%2F2017-12-11-git-user-config%2F</url>
    <content type="text"><![CDATA[必要性如果你的电脑上项目代码是从多个不同的代码托管网站上clone下来的，并且对应的用户名和邮箱信息不是都一样的，那么你就可以通过为你不同的项目配置不同的用户信息，保证push代码的用户信息是正确的。 配置方法我们可以为每一个项目都单独配置一下用户信息，但是往往你的电脑上大部分项目都是从一个代码托管网站上clone下来的，比如公司的项目，只有部分项目是从其他的网站上clone的，比如github，那么我们可以配置全局和局部的用户信息。 全局配置用户信息配置查看命令：git config –list，包含全局和局部配置。 全局配置用户信息命令：git config –global 具体例子如下： git config --global user.name &quot;xxxx&quot; git config --global user.email &quot;xxxx&quot;全局配置文件的路径：win7 -&gt; C：/Users/xxxxxx/.gitconfig配置文件内容例子如下： [user] name = xxxx email = xxxx@xx.com [core] excludesfile = C:\\Users\\xxxx\\Documents\\gitignore_global.txt局部配置局部配置用户信息命令：git config 具体例子如下： git config user.name &quot;xxxx&quot; git config user.email &quot;xxxx&quot;局部配置文件的路径：项目根目录下的.git文件夹下，例如：xxx/.git/config配置文件内容例子如下： [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true hideDotFiles = dotGitOnly [remote &quot;origin&quot;] url = git@github.com:gloryofme/gloryofme.github.io.git fetch = +refs/heads/*:refs/remotes/origin/* [branch &quot;master&quot;] remote = origin merge = refs/heads/master [user] name = gloryofme email = gloryofme@163.com]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSH免密配置]]></title>
    <url>%2F2017%2F12%2F10%2F2017-12-10-git-ssh-key-config%2F</url>
    <content type="text"><![CDATA[本文首先讲一下必要性，然后简单介绍配置步骤，其中配置多网站免密可选。 必要性 在使用git进行push到远程仓库的时候会进行身份验证，需要输入用户名和密码，如果每次push都需要我们这样做重复可能很麻烦的事儿，会降低消息。 github类似的一些代码托管网站一般都提供了ssh key管理的功能，可以登录到网站，添加ssh公钥key实现免密登录。 配置步骤 本地生成ssh公钥和密钥 拷贝公钥到网站 配置项目远程仓库url 配置多个git托管网站ssh key 生成密钥通过命令：ssh-keygen -t rsa -C “email@example.com“ 生成密钥，包含：公钥和私钥，公钥和私钥文件名相同，可以在命令执行过程中设置，公钥以pub为扩展名。命令执行过程中会提示：”Enter file in which to save the key(xxx/id_rsa):”，直接回车的话就会生成id_rsa和id_rsa.pub，一般只需要默认按回车键即可。但是如果想区分的话，可以指定自定义的名字。比如可以为github生成名为id_rsa_github的密钥，可以为开源中国创建名为id_rsa_open的密钥。 拷贝公钥将id_ras_xxx.pub中的内容拷贝到代码托管网站上，添加到ssh key中。 配置项目远程仓库地址在项目的本地仓库中.git文件夹下找到配置文件config，需将http格式的git地址修改成git@格式的地址。配置项为：remote.orgin.url。 配置多网站免密如果只使用一个代码托管网站，比如github，那么无需此配置。但是如果是需要使用多个呢，那么就需要做特殊配置。在本地的.ssh目录下的配置文件config中进行配置，配置内容如下： # 配置github.com Host github.com HostName github.com IdentityFile C:\\Users\\xxx\\.ssh\\id_rsa_github PreferredAuthentications publickey User gloryofme Host xxxxxx HostName xxxxxx IdentityFile C:\\Users\\xxx\\.ssh\\id_rsa_source PreferredAuthentications publickey User xxx主要配置说明： Host： 网站自定义别名 HostName： 网站的域名 IdentityFile： 对应密钥文件地址]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
